HEADER FILE DE LA CLASE HISTORICO:

    #ifndef CLASEHISTORICO_H
    #define CLASEHISTORICO_H

    #include <iostream>
    #include <string>
    #include <fstream>
    #include <ctime> //contiene las funcones para capturar la fecha y hora del sistema
    using namespace std;

    class historico{
    private:
        ofstream historicoEscritura; //objeto para escribir en el archivo
        ifstream historicoLectura; //obketo para leer la info del archivo
        string fecha; //guarda la fecha actual del sistema
        string hora; //guarda la hora actual del sistema

    public:
        historico(); //contrutor de la clase
        void guardarDatosPartida(string _jugador1, string _jugador2, string _ganador, int _puntajeGanador, int _totalPuntos);  //recoje los info de la partida para guardarla en el archivo
        void mostrarHistorico(); //imprime en consola el historico de las partidas
        string fechaHoraActual(); //toma la fecha y hora actual del sistema

    };

    #endif // CLASEHISTORICO_H


IMPLEMENTACION DE LOS METODOS DE LA CLASE HISTORICO: 

    #include "claseHistorico.h"
    using namespace std;

    historico::historico(){ //contructor, abre los archivos
        historicoEscritura.open("historico.txt", ios::app); //abre el archivo en modo escritura, el "ios::app" anade la info al final del archivo
        historicoLectura.open("historico.txt"); //abre el archivo en modo lectura

        if(!historicoEscritura.is_open() || !historicoLectura.is_open()){
            cerr << "Error al abrir el archivo." << endl; //si no es posible abrir el archivo el programa se cierra y muestra el mensaje en consola
        }
    }

    void historico::guardarDatosPartida(string _jugador1, string _jugador2, string _ganador, int _puntajeGanador, int _totalpuntos){
    /*metodo que tiene como parametros ls datos de la partida
    (jugadores, ganador, total de puntos) guarda esots datos en un archivo llamado historico.txt
    los datos se guardan asi: fecha y hora; jugadores; ganador; puntaje*/
    historicoEscritura << fechaHoraActual() << "; " << _jugador1 << " y " << _jugador2 << "; " << _ganador << "; " << _puntajeGanador << '/' << _totalpuntos << ";" << endl; //el formato en que se guarda la info es el siguiente: fecha, jugadores, ganador y puntaje
    historicoEscritura.close(); //cerramos el archivo para evitar posibles daños en el archivo
}

    void historico::mostrarHistorico(){
    /*metodo que se encarga de abrir el archivo que contiene el historico de las partidas
    se crea una estructura para el manejo de los datos, se instancia la clase stringstream para un mejor manejo de datos
    los datos se muestran en forma de una tabla: primero la fecha y hora, los jugadores, el ganador y el puntaje*/
    struct datosPartida{
        string fecha;
        string jugadores;
        string ganador;
        string puntaje;
    };

    string line;
    while(getline(historicoLectura, line)){
        stringstream flujo(line);
        datosPartida partida;

        getline(flujo, partida.fecha, ';');
        getline(flujo, partida.jugadores, ';');
        getline(flujo, partida.ganador, ';');
        getline(flujo, partida.puntaje, ';');
        cout << "\n________________________________\nFecha y hora: " << partida.fecha << "\nJugadores:\t" << partida.jugadores << "\nGanador:\t" << partida.ganador << "\nPuntaje:\t" << partida.puntaje << "\n________________________________\n" << endl;
    }
    historicoLectura.close();//cerramos el archivo para evitar posibles daños en el archivo
}

    string historico::fechaHoraActual(){//funcion para capturar la fecha y la hora actuales del sistema
        time_t actual = time(nullptr); //calcula el tiempo actual en segundos desde el 01/01/1970 la epoca Unix, time(nullptr) obtien la hora actual como un valor de time_t
        tm* local = localtime(&actual); //"localtime" convierte la info de actual en una estrutura "tm", local es un puntero que apunta hacia la estructura

        fecha = to_string(local ->tm_mday) + '/' + to_string(local ->tm_mon + 1) + '/' + to_string(local ->tm_year + 1900); /*string que contien la fecha: "tm_mday" dia del mes(1,31),
        "tm_mon" mes (0: enero, 11:diciembre) se le suma 1 para que sea en un formato mas amigable, "tm_year" almacena los años transxurridos desde 1900 se le suma este valor para que sea un formato mas amigable*/
        hora = to_string(local ->tm_hour) + ':' + to_string(local ->tm_min) + ':' + to_string(local ->tm_sec); /*string que contiene la hora: "tm_hour" hora del sitema (formato militar),
        "tm_min" minutos actuales del sistema (00, 59), "tm_sec" segundo actuales del sistema (00, 59)*/
        fecha = fecha + " " + hora; //se almacenan los datos en un solo string para ser retornados por al funcion
        return fecha; //retorno de la funcion
    }


MAIN.CPP DONDE SE INSTANCIA LA CLASE Y SE PRUEBA SU FUNCIONAMIENTO

    #include "claseHistorico.h"

    int main(){
        string jugador1;
        string jugador2;
        int puntaje;
        int totalPuntos;

        historico datos;
        datos.guardarDatosPartida(jugador1,jugador2,jugador1,puntaje,totalPuntos);
        datos.mostrarHistorico();
    return 0;
    }


CORRECCION METODO "POSICIONES_POSIBLES":
        void tablero::posiciones_posibles(int turno)
        /*
         Parámetros: Número entero (1 o 2) que hace referencia al jugador en turno.
         Return: Vacía. Cambia valores de la matriz booleana internamente sin necesidad de retorno
        
         La función recorre la matriz que tiene almacenada la distribución de las fichas, por cada
         posición, analiza las 8 casillas/posiciones vecinas. Si en esa posición vecina
         está almacenado el valor del oponente, analiza la posición siguiente a esta en la misma dirección
         hasta encontrar un espacio vacío (representado por un 0). Cuando se encuetre la posición
         que almacena el numero 0, se cambiará esa misma posición en la matriz booleana asignando un
         valor True que indica que esa poscición en una jugada posible.
        
         */
        {
            int proximas[8][2] = {{-1, -1}, {-1, 0}, {-1, 1}, {0, 1}, {1, 1}, {1, 0}, {1, -1}, {0, -1}};
            int contrario = (turno == 1) ? 2 : 1;  // Alternativa para determinar el contrario
            bool pos_vacia;
        
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    if (matriz[i][j] == turno) {
                        for (int cont = 0; cont < 8; cont++) {
                            int pos_filas = i + proximas[cont][0];
                            int pos_columnas = j + proximas[cont][1];
        
                            if (pos_filas >= 0 && pos_columnas >= 0 && pos_filas < n && pos_columnas < n) {
                                if (matriz[pos_filas][pos_columnas] == contrario) {
                                    pos_vacia = false;
                                    pos_filas += proximas[cont][0];
                                    pos_columnas += proximas[cont][1];
        
                                    while (!pos_vacia && pos_filas >= 0 && pos_columnas >= 0 && pos_filas < n && pos_columnas < n) {
                                        if (matriz[pos_filas][pos_columnas] == 0) {
                                            posiciones_juego[pos_filas][pos_columnas] = true;
                                            pos_vacia = true;
                                        } else if (matriz[pos_filas][pos_columnas] == turno) {
                                            pos_vacia = true;
                                        }
        
                                        pos_filas += proximas[cont][0];
                                        pos_columnas += proximas[cont][1];
                                    }
                                }
                            }
                        }
                    }
                }
            }    
        }
